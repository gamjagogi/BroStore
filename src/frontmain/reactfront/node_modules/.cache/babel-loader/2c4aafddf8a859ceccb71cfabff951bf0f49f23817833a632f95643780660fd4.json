{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container } from \"../../components/Styles/Container/Container.style\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Pagination from 'react-bootstrap/Pagination';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Image from 'react-bootstrap/Image';\nimport axios from '../Request/RequestConfig.js';\nconst SoftwareData = () => {\n  _s();\n  const [boardPG, setBoardPG] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const accessToken = localStorage.getItem('accessToken');\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (accessToken && refreshToken) {\n          const response = await axios.get('/auth/software', {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${accessToken}`,\n              'RefreshToken': `Bearer ${refreshToken}`\n            }\n          });\n          if (response.status === 200) {\n            const data = response.data;\n            console.log(data);\n            const boardData = data.map(currentProduct => ({\n              id: currentProduct.id,\n              sku: \"FAS-01\",\n              link: currentProduct.link,\n              title: currentProduct.title,\n              img: currentProduct.content.thumbnail,\n              price: currentProduct.content.price,\n              originPrice: currentProduct.content.originPrice,\n              discountPrice: currentProduct.content.discountPrice,\n              discountPercentage: currentProduct.content.discountPercentage,\n              isNew: currentProduct.content.isNew,\n              isHot: currentProduct.content.isHot,\n              star: currentProduct.content.star,\n              isFreeShipping: currentProduct.content.isFreeShipping,\n              description: currentProduct.content.content\n            }));\n            setBoardPG(boardData);\n          } else {\n            console.log('인증된 유저만 접근 가능합니다.');\n          }\n        } else {\n          console.log('로그인이 필요합니다.');\n        }\n      } catch (error) {\n        console.error('인증되지 않은 사용자가 접근하려 합니다..', error);\n        console.log('인증된 유저만 접근 가능합니다.');\n      }\n    };\n    return fetchData();\n  }, []);\n};\n_s(SoftwareData, \"qa8mYD3lGXw/UQbw4HiVGJjR2X0=\");\n_c = SoftwareData;\nexport default SoftwareData;\nvar _c;\n$RefreshReg$(_c, \"SoftwareData\");","map":{"version":3,"names":["React","useState","useEffect","Container","useLocation","useNavigate","Pagination","ListGroup","Image","axios","SoftwareData","_s","boardPG","setBoardPG","fetchData","accessToken","localStorage","getItem","refreshToken","response","get","headers","status","data","console","log","boardData","map","currentProduct","id","sku","link","title","img","content","thumbnail","price","originPrice","discountPrice","discountPercentage","isNew","isHot","star","isFreeShipping","description","error","_c","$RefreshReg$"],"sources":["C:/OneDrive - 84913/OneDrive/study material/workspace/3.MACRO_STORE/hjstore/src/frontmain/reactfront/src/screens/product/SoftwareData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container } from \"../../components/Styles/Container/Container.style\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Image from 'react-bootstrap/Image';\r\nimport axios from '../Request/RequestConfig.js';\r\n\r\nconst SoftwareData = () => {\r\n    const [boardPG, setBoardPG] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const accessToken = localStorage.getItem('accessToken');\r\n                const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n                if (accessToken && refreshToken) {\r\n                    const response = await axios.get('/auth/software', {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Authorization': `Bearer ${accessToken}`,\r\n                            'RefreshToken': `Bearer ${refreshToken}`,\r\n                        },\r\n                    });\r\n\r\n                    if (response.status === 200) {\r\n                        const data = response.data;\r\n                        console.log(data);\r\n                        const boardData = data.map((currentProduct) => ({\r\n                            id: currentProduct.id,\r\n                            sku: \"FAS-01\",\r\n                            link: currentProduct.link,\r\n                            title: currentProduct.title,\r\n                            img: currentProduct.content.thumbnail,\r\n                            price: currentProduct.content.price,\r\n                            originPrice: currentProduct.content.originPrice,\r\n                            discountPrice: currentProduct.content.discountPrice,\r\n                            discountPercentage: currentProduct.content.discountPercentage,\r\n                            isNew: currentProduct.content.isNew,\r\n                            isHot: currentProduct.content.isHot,\r\n                            star: currentProduct.content.star,\r\n                            isFreeShipping: currentProduct.content.isFreeShipping,\r\n                            description: currentProduct.content.content,\r\n                        }));\r\n                        setBoardPG(boardData);\r\n                    } else {\r\n                        console.log('인증된 유저만 접근 가능합니다.');\r\n                    }\r\n                } else {\r\n                    console.log('로그인이 필요합니다.');\r\n                }\r\n            } catch (error) {\r\n                console.error('인증되지 않은 사용자가 접근하려 합니다..', error);\r\n                console.log('인증된 유저만 접근 가능합니다.');\r\n            }\r\n        };\r\n\r\n        return fetchData();\r\n    }, []);\r\n}\r\n\r\nexport default SoftwareData;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,mDAAmD;AAC7E,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,MAAM,6BAA6B;AAE/C,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACZ,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;QACvD,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;QAEzD,IAAIF,WAAW,IAAIG,YAAY,EAAE;UAC7B,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,gBAAgB,EAAE;YAC/CC,OAAO,EAAE;cACL,cAAc,EAAE,kBAAkB;cAClC,eAAe,EAAG,UAASN,WAAY,EAAC;cACxC,cAAc,EAAG,UAASG,YAAa;YAC3C;UACJ,CAAC,CAAC;UAEF,IAAIC,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;YACzB,MAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAI;YAC1BC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;YACjB,MAAMG,SAAS,GAAGH,IAAI,CAACI,GAAG,CAAEC,cAAc,KAAM;cAC5CC,EAAE,EAAED,cAAc,CAACC,EAAE;cACrBC,GAAG,EAAE,QAAQ;cACbC,IAAI,EAAEH,cAAc,CAACG,IAAI;cACzBC,KAAK,EAAEJ,cAAc,CAACI,KAAK;cAC3BC,GAAG,EAAEL,cAAc,CAACM,OAAO,CAACC,SAAS;cACrCC,KAAK,EAAER,cAAc,CAACM,OAAO,CAACE,KAAK;cACnCC,WAAW,EAAET,cAAc,CAACM,OAAO,CAACG,WAAW;cAC/CC,aAAa,EAAEV,cAAc,CAACM,OAAO,CAACI,aAAa;cACnDC,kBAAkB,EAAEX,cAAc,CAACM,OAAO,CAACK,kBAAkB;cAC7DC,KAAK,EAAEZ,cAAc,CAACM,OAAO,CAACM,KAAK;cACnCC,KAAK,EAAEb,cAAc,CAACM,OAAO,CAACO,KAAK;cACnCC,IAAI,EAAEd,cAAc,CAACM,OAAO,CAACQ,IAAI;cACjCC,cAAc,EAAEf,cAAc,CAACM,OAAO,CAACS,cAAc;cACrDC,WAAW,EAAEhB,cAAc,CAACM,OAAO,CAACA;YACxC,CAAC,CAAC,CAAC;YACHrB,UAAU,CAACa,SAAS,CAAC;UACzB,CAAC,MAAM;YACHF,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;UACpC;QACJ,CAAC,MAAM;UACHD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC9B;MACJ,CAAC,CAAC,OAAOoB,KAAK,EAAE;QACZrB,OAAO,CAACqB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/CrB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MACpC;IACJ,CAAC;IAED,OAAOX,SAAS,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;AACV,CAAC;AAAAH,EAAA,CApDKD,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAsDlB,eAAeA,YAAY;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
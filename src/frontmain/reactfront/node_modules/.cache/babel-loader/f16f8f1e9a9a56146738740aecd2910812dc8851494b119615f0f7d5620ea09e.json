{"ast":null,"code":"var _jsxFileName = \"C:\\\\OneDrive - 84913\\\\OneDrive\\\\study material\\\\workspace\\\\3.MACRO_STORE\\\\hjstore\\\\src\\\\frontmain\\\\reactfront\\\\src\\\\components\\\\Board\\\\ImageLibrary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ListGroup, Button, Dropdown } from 'react-bootstrap';\nimport Card from 'react-bootstrap/Card';\nimport { Editor } from '../Styles/Editorform/Editor.style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageLibrary = _ref => {\n  _s();\n  let {\n    imageSrc\n  } = _ref;\n  const [loginError, setLoginError] = useState('');\n  const [urls, setUrls] = useState([]);\n  const [updatedDomArray, setUpdatedDomArray] = useState([]);\n\n  // 이미지 소스를 urls 배열에 추가.(기존 요소 유지하며 추가)\n  useEffect(() => {\n    if (typeof imageSrc === 'string') {\n      setUrls(prevUrls => prevUrls.filter(url => url !== ''));\n      setUrls(prevUrls => {\n        // 중복 체크\n        if (prevUrls.includes(imageSrc)) {\n          return prevUrls; // 중복된 요소가 이미 존재하면 배열을 그대로 반환\n        } else {\n          return [...prevUrls, imageSrc]; // 중복된 요소가 없으면 새로운 요소 추가\n        }\n      });\n    }\n  }, [imageSrc]);\n\n  // urls배열의 요소를 하나씩 dom형태로 만들어, updatedDomArray배열에 넣는다. (기존 요소 초기화됨)\n  useEffect(() => {\n    const domArray = urls.map((url, index) => {\n      const itemIndex = index + 1;\n      const uniqueKey = `image_${itemIndex}`;\n      return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        as: \"li\",\n        draggable: \"true\",\n        \"data-log\": \"lib.diplomat\",\n        \"data-index\": itemIndex,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '5rem'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n            variant: \"top\",\n            src: url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => handleDelete(itemIndex),\n              variant: \"primary\",\n              style: {\n                width: '3rem',\n                fontSize: '11px'\n              },\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)\n      }, uniqueKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this);\n    });\n    setUpdatedDomArray(domArray);\n  }, [urls]);\n\n  // 특정 이미지 삭제\n  const handleDelete = async itemIndex => {\n    try {\n      setUrls(prevUrls => prevUrls.filter((_, index) => index + 1 !== itemIndex));\n    } catch (error) {\n      console.error('삭제 중 오류 발생.', error);\n      setLoginError('삭제 중 오류가 발생했습니다.');\n    }\n  };\n\n  // 라이브러리 열림,닫힘 초기화\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const toggleDropdown = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    show: dropdownOpen,\n    onToggle: toggleDropdown,\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n      variant: \"primary\",\n      id: \"dropdown-basic-button\",\n      children: \"\\uC0AC\\uC9C4 \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n      show: true,\n      align: \"right\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        children: /*#__PURE__*/_jsxDEV(ListGroup, {\n          as: \"ul\",\n          className: \"se-sidebar-list\",\n          children: updatedDomArray\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageLibrary, \"SgobVpMCdnV5novfmfpjjsANtAE=\");\n_c = ImageLibrary;\nexport default ImageLibrary;\nvar _c;\n$RefreshReg$(_c, \"ImageLibrary\");","map":{"version":3,"names":["React","useState","useEffect","ListGroup","Button","Dropdown","Card","Editor","jsxDEV","_jsxDEV","ImageLibrary","_ref","_s","imageSrc","loginError","setLoginError","urls","setUrls","updatedDomArray","setUpdatedDomArray","prevUrls","filter","url","includes","domArray","map","index","itemIndex","uniqueKey","Item","as","draggable","children","style","width","Img","variant","src","fileName","_jsxFileName","lineNumber","columnNumber","Body","onClick","handleDelete","fontSize","_","error","console","dropdownOpen","setDropdownOpen","toggleDropdown","show","onToggle","Toggle","id","Menu","align","className","_c","$RefreshReg$"],"sources":["C:/OneDrive - 84913/OneDrive/study material/workspace/3.MACRO_STORE/hjstore/src/frontmain/reactfront/src/components/Board/ImageLibrary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ListGroup, Button, Dropdown } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Editor } from '../Styles/Editorform/Editor.style';\r\n\r\nconst ImageLibrary = ({ imageSrc }) => {\r\n    const [loginError, setLoginError] = useState('');\r\n    const [urls, setUrls] = useState([]);\r\n    const [updatedDomArray, setUpdatedDomArray] = useState([]);\r\n\r\n    // 이미지 소스를 urls 배열에 추가.(기존 요소 유지하며 추가)\r\n    useEffect(() => {\r\n        if (typeof imageSrc === 'string') {\r\n            setUrls(prevUrls => prevUrls.filter(url => url !== ''));\r\n            setUrls(prevUrls => {\r\n                // 중복 체크\r\n                if (prevUrls.includes(imageSrc)) {\r\n                    return prevUrls; // 중복된 요소가 이미 존재하면 배열을 그대로 반환\r\n                } else {\r\n                    return [...prevUrls, imageSrc]; // 중복된 요소가 없으면 새로운 요소 추가\r\n                }\r\n            });\r\n        }\r\n    }, [imageSrc]);\r\n\r\n    // urls배열의 요소를 하나씩 dom형태로 만들어, updatedDomArray배열에 넣는다. (기존 요소 초기화됨)\r\n    useEffect(() => {\r\n        const domArray = urls.map((url, index) => {\r\n            const itemIndex = index + 1;\r\n            const uniqueKey = `image_${itemIndex}`;\r\n            return (\r\n                <ListGroup.Item\r\n                    as=\"li\"\r\n                    draggable=\"true\"\r\n                    data-log=\"lib.diplomat\"\r\n                    data-index={itemIndex}\r\n                    key={uniqueKey}\r\n                >\r\n                    <Card style={{ width: '5rem' }}>\r\n                        <Card.Img variant=\"top\" src={url} />\r\n                        <Card.Body>\r\n                            <Button onClick={() => handleDelete(itemIndex)} variant=\"primary\" style={{ width: '3rem', fontSize: '11px' }}>\r\n                                삭제\r\n                            </Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </ListGroup.Item>\r\n            );\r\n        });\r\n        setUpdatedDomArray(domArray);\r\n    }, [urls]);\r\n\r\n    // 특정 이미지 삭제\r\n    const handleDelete = async (itemIndex) => {\r\n        try {\r\n            setUrls(prevUrls => prevUrls.filter((_, index) => index + 1 !== itemIndex));\r\n        } catch (error) {\r\n            console.error('삭제 중 오류 발생.', error);\r\n            setLoginError('삭제 중 오류가 발생했습니다.');\r\n        }\r\n    };\r\n\r\n    // 라이브러리 열림,닫힘 초기화\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    const toggleDropdown = () => {\r\n        setDropdownOpen(!dropdownOpen);\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic-button\">\r\n                사진 라이브러리\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu show={true} align=\"right\">\r\n                <Editor>\r\n                    <ListGroup as=\"ul\" className=\"se-sidebar-list\">\r\n                        {updatedDomArray}\r\n                    </ListGroup>\r\n                </Editor>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default ImageLibrary;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,iBAAiB;AAC7D,OAAOC,IAAI,MAAM,sBAAsB;AACvC,SAASC,MAAM,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,YAAY,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC9B,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACAC,SAAS,CAAC,MAAM;IACZ,IAAI,OAAOW,QAAQ,KAAK,QAAQ,EAAE;MAC9BI,OAAO,CAACG,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,KAAK,EAAE,CAAC,CAAC;MACvDL,OAAO,CAACG,QAAQ,IAAI;QAChB;QACA,IAAIA,QAAQ,CAACG,QAAQ,CAACV,QAAQ,CAAC,EAAE;UAC7B,OAAOO,QAAQ,CAAC,CAAC;QACrB,CAAC,MAAM;UACH,OAAO,CAAC,GAAGA,QAAQ,EAAEP,QAAQ,CAAC,CAAC,CAAC;QACpC;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACAX,SAAS,CAAC,MAAM;IACZ,MAAMsB,QAAQ,GAAGR,IAAI,CAACS,GAAG,CAAC,CAACH,GAAG,EAAEI,KAAK,KAAK;MACtC,MAAMC,SAAS,GAAGD,KAAK,GAAG,CAAC;MAC3B,MAAME,SAAS,GAAI,SAAQD,SAAU,EAAC;MACtC,oBACIlB,OAAA,CAACN,SAAS,CAAC0B,IAAI;QACXC,EAAE,EAAC,IAAI;QACPC,SAAS,EAAC,MAAM;QAChB,YAAS,cAAc;QACvB,cAAYJ,SAAU;QAAAK,QAAA,eAGtBvB,OAAA,CAACH,IAAI;UAAC2B,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAO,CAAE;UAAAF,QAAA,gBAC3BvB,OAAA,CAACH,IAAI,CAAC6B,GAAG;YAACC,OAAO,EAAC,KAAK;YAACC,GAAG,EAAEf;UAAI;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACpChC,OAAA,CAACH,IAAI,CAACoC,IAAI;YAAAV,QAAA,eACNvB,OAAA,CAACL,MAAM;cAACuC,OAAO,EAAEA,CAAA,KAAMC,YAAY,CAACjB,SAAS,CAAE;cAACS,OAAO,EAAC,SAAS;cAACH,KAAK,EAAE;gBAAEC,KAAK,EAAE,MAAM;gBAAEW,QAAQ,EAAE;cAAO,CAAE;cAAAb,QAAA,EAAC;YAE9G;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC,GATFb,SAAS;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUF,CAAC;IAEzB,CAAC,CAAC;IACFtB,kBAAkB,CAACK,QAAQ,CAAC;EAChC,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;;EAEV;EACA,MAAM4B,YAAY,GAAG,MAAOjB,SAAS,IAAK;IACtC,IAAI;MACAV,OAAO,CAACG,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC,CAACyB,CAAC,EAAEpB,KAAK,KAAKA,KAAK,GAAG,CAAC,KAAKC,SAAS,CAAC,CAAC;IAC/E,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnChC,aAAa,CAAC,kBAAkB,CAAC;IACrC;EACJ,CAAC;;EAED;EACA,MAAM,CAACkC,YAAY,EAAEC,eAAe,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMkD,cAAc,GAAGA,CAAA,KAAM;IACzBD,eAAe,CAAC,CAACD,YAAY,CAAC;EAClC,CAAC;EAED,oBACIxC,OAAA,CAACJ,QAAQ;IAAC+C,IAAI,EAAEH,YAAa;IAACI,QAAQ,EAAEF,cAAe;IAAAnB,QAAA,gBACnDvB,OAAA,CAACJ,QAAQ,CAACiD,MAAM;MAAClB,OAAO,EAAC,SAAS;MAACmB,EAAE,EAAC,uBAAuB;MAAAvB,QAAA,EAAC;IAE9D;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAAC,eAElBhC,OAAA,CAACJ,QAAQ,CAACmD,IAAI;MAACJ,IAAI,EAAE,IAAK;MAACK,KAAK,EAAC,OAAO;MAAAzB,QAAA,eACpCvB,OAAA,CAACF,MAAM;QAAAyB,QAAA,eACHvB,OAAA,CAACN,SAAS;UAAC2B,EAAE,EAAC,IAAI;UAAC4B,SAAS,EAAC,iBAAiB;UAAA1B,QAAA,EACzCd;QAAe;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEnB,CAAC;AAAC7B,EAAA,CA/EIF,YAAY;AAAAiD,EAAA,GAAZjD,YAAY;AAiFlB,eAAeA,YAAY;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
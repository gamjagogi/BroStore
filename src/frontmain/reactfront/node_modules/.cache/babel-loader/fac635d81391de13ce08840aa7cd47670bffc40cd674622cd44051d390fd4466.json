{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container } from \"../../components/Styles/Container/Container.style\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport Pagination from 'react-bootstrap/Pagination';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Image from 'react-bootstrap/Image';\nimport axios from '../Request/RequestConfig.js';\nconst SoftwareData = async () => {\n  _s();\n  const [boardPG, setBoardPG] = useState([]);\n  console.log('진입');\n  try {\n    const accessToken = localStorage.getItem('accessToken');\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (accessToken && refreshToken) {\n      const response = await axios.get('/auth/software', {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`,\n          'RefreshToken': `Bearer ${refreshToken}`\n        }\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        console.log(data);\n        const boardData = data.map(currentProduct => ({\n          id: currentProduct.id,\n          sku: \"FAS-01\",\n          link: currentProduct.link,\n          title: currentProduct.title,\n          img: currentProduct.content.thumbnail,\n          price: currentProduct.content.price,\n          originPrice: currentProduct.content.originPrice,\n          discountPrice: currentProduct.content.discountPrice,\n          discountPercentage: currentProduct.content.discountPercentage,\n          isNew: currentProduct.content.isNew,\n          isHot: currentProduct.content.isHot,\n          star: currentProduct.content.star,\n          isFreeShipping: currentProduct.content.isFreeShipping,\n          description: currentProduct.content.content\n        }));\n        setBoardPG(boardData);\n      } else {\n        console.log('인증된 유저만 접근 가능합니다.');\n      }\n    } else {\n      console.log('로그인이 필요합니다.');\n    }\n  } catch (error) {\n    console.error('인증되지 않은 사용자가 접근하려 합니다..', error);\n    console.log('인증된 유저만 접근 가능합니다.');\n  }\n  console.log(boardPG);\n  return boardPG;\n};\n_s(SoftwareData, \"XCGGwaR0dp2QnodZ+mm8zgS3+DI=\");\n_c = SoftwareData;\nexport default SoftwareData;\nvar _c;\n$RefreshReg$(_c, \"SoftwareData\");","map":{"version":3,"names":["React","useState","useEffect","Container","useLocation","useNavigate","Pagination","ListGroup","Image","axios","SoftwareData","_s","boardPG","setBoardPG","console","log","accessToken","localStorage","getItem","refreshToken","response","get","headers","status","data","boardData","map","currentProduct","id","sku","link","title","img","content","thumbnail","price","originPrice","discountPrice","discountPercentage","isNew","isHot","star","isFreeShipping","description","error","_c","$RefreshReg$"],"sources":["C:/OneDrive - 84913/OneDrive/study material/workspace/3.MACRO_STORE/hjstore/src/frontmain/reactfront/src/screens/product/SoftwareData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container } from \"../../components/Styles/Container/Container.style\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport Pagination from 'react-bootstrap/Pagination';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Image from 'react-bootstrap/Image';\r\nimport axios from '../Request/RequestConfig.js';\r\n\r\nconst SoftwareData = async () => {\r\n    const [boardPG, setBoardPG] = useState([]);\r\n    console.log('진입');\r\n\r\n\r\n\r\n            try {\r\n                const accessToken = localStorage.getItem('accessToken');\r\n                const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n                if (accessToken && refreshToken) {\r\n                    const response = await axios.get('/auth/software', {\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            'Authorization': `Bearer ${accessToken}`,\r\n                            'RefreshToken': `Bearer ${refreshToken}`,\r\n                        },\r\n                    });\r\n\r\n                    if (response.status === 200) {\r\n                        const data = response.data;\r\n                        console.log(data);\r\n                        const boardData = data.map((currentProduct) => ({\r\n                            id: currentProduct.id,\r\n                            sku: \"FAS-01\",\r\n                            link: currentProduct.link,\r\n                            title: currentProduct.title,\r\n                            img: currentProduct.content.thumbnail,\r\n                            price: currentProduct.content.price,\r\n                            originPrice: currentProduct.content.originPrice,\r\n                            discountPrice: currentProduct.content.discountPrice,\r\n                            discountPercentage: currentProduct.content.discountPercentage,\r\n                            isNew: currentProduct.content.isNew,\r\n                            isHot: currentProduct.content.isHot,\r\n                            star: currentProduct.content.star,\r\n                            isFreeShipping: currentProduct.content.isFreeShipping,\r\n                            description: currentProduct.content.content,\r\n                        }));\r\n                        setBoardPG(boardData);\r\n                    } else {\r\n                        console.log('인증된 유저만 접근 가능합니다.');\r\n                    }\r\n                } else {\r\n                    console.log('로그인이 필요합니다.');\r\n                }\r\n            } catch (error) {\r\n                console.error('인증되지 않은 사용자가 접근하려 합니다..', error);\r\n                console.log('인증된 유저만 접근 가능합니다.');\r\n            }\r\n\r\n\r\n    console.log(boardPG);\r\n    return boardPG;\r\n}\r\n\r\nexport default SoftwareData;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,mDAAmD;AAC7E,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,KAAK,MAAM,uBAAuB;AACzC,OAAOC,KAAK,MAAM,6BAA6B;AAE/C,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAAAC,EAAA;EAC7B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1Ca,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;EAIT,IAAI;IACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACvD,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAEzD,IAAIF,WAAW,IAAIG,YAAY,EAAE;MAC7B,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,gBAAgB,EAAE;QAC/CC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASN,WAAY,EAAC;UACxC,cAAc,EAAG,UAASG,YAAa;QAC3C;MACJ,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QACzB,MAAMC,IAAI,GAAGJ,QAAQ,CAACI,IAAI;QAC1BV,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;QACjB,MAAMC,SAAS,GAAGD,IAAI,CAACE,GAAG,CAAEC,cAAc,KAAM;UAC5CC,EAAE,EAAED,cAAc,CAACC,EAAE;UACrBC,GAAG,EAAE,QAAQ;UACbC,IAAI,EAAEH,cAAc,CAACG,IAAI;UACzBC,KAAK,EAAEJ,cAAc,CAACI,KAAK;UAC3BC,GAAG,EAAEL,cAAc,CAACM,OAAO,CAACC,SAAS;UACrCC,KAAK,EAAER,cAAc,CAACM,OAAO,CAACE,KAAK;UACnCC,WAAW,EAAET,cAAc,CAACM,OAAO,CAACG,WAAW;UAC/CC,aAAa,EAAEV,cAAc,CAACM,OAAO,CAACI,aAAa;UACnDC,kBAAkB,EAAEX,cAAc,CAACM,OAAO,CAACK,kBAAkB;UAC7DC,KAAK,EAAEZ,cAAc,CAACM,OAAO,CAACM,KAAK;UACnCC,KAAK,EAAEb,cAAc,CAACM,OAAO,CAACO,KAAK;UACnCC,IAAI,EAAEd,cAAc,CAACM,OAAO,CAACQ,IAAI;UACjCC,cAAc,EAAEf,cAAc,CAACM,OAAO,CAACS,cAAc;UACrDC,WAAW,EAAEhB,cAAc,CAACM,OAAO,CAACA;QACxC,CAAC,CAAC,CAAC;QACHpB,UAAU,CAACY,SAAS,CAAC;MACzB,CAAC,MAAM;QACHX,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MACpC;IACJ,CAAC,MAAM;MACHD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC9B;EACJ,CAAC,CAAC,OAAO6B,KAAK,EAAE;IACZ9B,OAAO,CAAC8B,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C9B,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EACpC;EAGRD,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;EACpB,OAAOA,OAAO;AAClB,CAAC;AAAAD,EAAA,CArDKD,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAuDlB,eAAeA,YAAY;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}